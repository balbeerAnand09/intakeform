// Code generated by MockGen. DO NOT EDIT.
// Source: ..\pb\locations\location.pb.go

// Package servers_mocks is a generated GoMock package.
package servers_mocks

import (
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	locations "go.appointy.com/google/pb/locations"
	program "go.appointy.com/google/pb/program"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLocationsClient is a mock of LocationsClient interface
type MockLocationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLocationsClientMockRecorder
}

// MockLocationsClientMockRecorder is the mock recorder for MockLocationsClient
type MockLocationsClientMockRecorder struct {
	mock *MockLocationsClient
}

// NewMockLocationsClient creates a new mock instance
func NewMockLocationsClient(ctrl *gomock.Controller) *MockLocationsClient {
	mock := &MockLocationsClient{ctrl: ctrl}
	mock.recorder = &MockLocationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocationsClient) EXPECT() *MockLocationsClientMockRecorder {
	return m.recorder
}

// AddLocation mocks base method
func (m *MockLocationsClient) AddLocation(ctx context.Context, in *locations.Location, opts ...grpc.CallOption) (*locations.LocationIdentifier, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLocation", varargs...)
	ret0, _ := ret[0].(*locations.LocationIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocation indicates an expected call of AddLocation
func (mr *MockLocationsClientMockRecorder) AddLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocation", reflect.TypeOf((*MockLocationsClient)(nil).AddLocation), varargs...)
}

// GetLocations mocks base method
func (m *MockLocationsClient) GetLocations(ctx context.Context, in *locations.LocationIdentifier, opts ...grpc.CallOption) (*locations.Location, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocations", varargs...)
	ret0, _ := ret[0].(*locations.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations
func (mr *MockLocationsClientMockRecorder) GetLocations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*MockLocationsClient)(nil).GetLocations), varargs...)
}

// UpdateLocation mocks base method
func (m *MockLocationsClient) UpdateLocation(ctx context.Context, in *locations.Location, opts ...grpc.CallOption) (*empty.Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLocation", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation
func (mr *MockLocationsClientMockRecorder) UpdateLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockLocationsClient)(nil).UpdateLocation), varargs...)
}

// DeleteLocation mocks base method
func (m *MockLocationsClient) DeleteLocation(ctx context.Context, in *locations.LocationIdentifier, opts ...grpc.CallOption) (*empty.Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLocation", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocation indicates an expected call of DeleteLocation
func (mr *MockLocationsClientMockRecorder) DeleteLocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockLocationsClient)(nil).DeleteLocation), varargs...)
}

// ListLocations mocks base method
func (m *MockLocationsClient) ListLocations(ctx context.Context, in *program.ProgramRoot, opts ...grpc.CallOption) (*locations.LocationsList, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLocations", varargs...)
	ret0, _ := ret[0].(*locations.LocationsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations
func (mr *MockLocationsClientMockRecorder) ListLocations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockLocationsClient)(nil).ListLocations), varargs...)
}

// GetLocationByCode mocks base method
func (m *MockLocationsClient) GetLocationByCode(ctx context.Context, in *locations.GetLocationByCodeReq, opts ...grpc.CallOption) (*locations.Location, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocationByCode", varargs...)
	ret0, _ := ret[0].(*locations.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByCode indicates an expected call of GetLocationByCode
func (mr *MockLocationsClientMockRecorder) GetLocationByCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByCode", reflect.TypeOf((*MockLocationsClient)(nil).GetLocationByCode), varargs...)
}

// MockLocationsServer is a mock of LocationsServer interface
type MockLocationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockLocationsServerMockRecorder
}

// MockLocationsServerMockRecorder is the mock recorder for MockLocationsServer
type MockLocationsServerMockRecorder struct {
	mock *MockLocationsServer
}

// NewMockLocationsServer creates a new mock instance
func NewMockLocationsServer(ctrl *gomock.Controller) *MockLocationsServer {
	mock := &MockLocationsServer{ctrl: ctrl}
	mock.recorder = &MockLocationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocationsServer) EXPECT() *MockLocationsServerMockRecorder {
	return m.recorder
}

// AddLocation mocks base method
func (m *MockLocationsServer) AddLocation(arg0 context.Context, arg1 *locations.Location) (*locations.LocationIdentifier, error) {
	ret := m.ctrl.Call(m, "AddLocation", arg0, arg1)
	ret0, _ := ret[0].(*locations.LocationIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocation indicates an expected call of AddLocation
func (mr *MockLocationsServerMockRecorder) AddLocation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocation", reflect.TypeOf((*MockLocationsServer)(nil).AddLocation), arg0, arg1)
}

// GetLocations mocks base method
func (m *MockLocationsServer) GetLocations(arg0 context.Context, arg1 *locations.LocationIdentifier) (*locations.Location, error) {
	ret := m.ctrl.Call(m, "GetLocations", arg0, arg1)
	ret0, _ := ret[0].(*locations.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations
func (mr *MockLocationsServerMockRecorder) GetLocations(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*MockLocationsServer)(nil).GetLocations), arg0, arg1)
}

// UpdateLocation mocks base method
func (m *MockLocationsServer) UpdateLocation(arg0 context.Context, arg1 *locations.Location) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation
func (mr *MockLocationsServerMockRecorder) UpdateLocation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockLocationsServer)(nil).UpdateLocation), arg0, arg1)
}

// DeleteLocation mocks base method
func (m *MockLocationsServer) DeleteLocation(arg0 context.Context, arg1 *locations.LocationIdentifier) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "DeleteLocation", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocation indicates an expected call of DeleteLocation
func (mr *MockLocationsServerMockRecorder) DeleteLocation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockLocationsServer)(nil).DeleteLocation), arg0, arg1)
}

// ListLocations mocks base method
func (m *MockLocationsServer) ListLocations(arg0 context.Context, arg1 *program.ProgramRoot) (*locations.LocationsList, error) {
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1)
	ret0, _ := ret[0].(*locations.LocationsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations
func (mr *MockLocationsServerMockRecorder) ListLocations(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockLocationsServer)(nil).ListLocations), arg0, arg1)
}

// GetLocationByCode mocks base method
func (m *MockLocationsServer) GetLocationByCode(arg0 context.Context, arg1 *locations.GetLocationByCodeReq) (*locations.Location, error) {
	ret := m.ctrl.Call(m, "GetLocationByCode", arg0, arg1)
	ret0, _ := ret[0].(*locations.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByCode indicates an expected call of GetLocationByCode
func (mr *MockLocationsServerMockRecorder) GetLocationByCode(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByCode", reflect.TypeOf((*MockLocationsServer)(nil).GetLocationByCode), arg0, arg1)
}
